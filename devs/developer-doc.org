* install with development dependencies
```pip install -e .[dev]```
* development testing
** check code with fake8:
make lint
** run tests with default python:
make test
** run tests with all support python versions:
make test-all
** test install from local dist:
make test-pip
** check test coverage:
make coverage
** build docs:
  make docs
or on Mac OS/X
  make docs-open
** push to github
** rebuild master at readthedocs to check for errors

* test pip with testpypi
** Update the version in code, but don't change git.  Version number needed for testing pip, however this might result in changes
bumpversion --allow-dirty --no-commit --no-tag [major|minor|patch]
** make test
** testing pip install using pypitest.  Must bump version for retesting:
make release-testpypi
** test release install from pypitest in virtualenv
make test-release-testpypi

* Release process:
** do all of the above testing
** WARNING: may have to update git tag if any things fixed
** update HISTORY.rst
** Do the git duty
- git reset --hard
- bumpversion [major|minor|patch]
- commit to master
- git push origin --tags
- git push
- git status  # make sure origin is in sync
** make release
** update readthedocs version in GUI
** make release-test
might have to wait a minute for it to become live
** make a new release on github
** update readthedocs to build this release

* CondaForge

** staging
conda create --name pipettor-conda
conda install -c conda-forge grayskull
git checkout -b pipettor
grayskull pypi --strict-conda-forge pipettor
